library(devtools)
use_package("dbarts")
use_package("loo")
use_package("posterior")
use_r("EBcoBART_Functions")
devtools::load_all(".")
p <- 500
sigma <- 1.0
N <- 100
G <- 5   #number of groups
CoDat = rep(1:G, rep(p/G,G))
CoDat = data.frame(factor(CoDat))
CoDat <- model.matrix(~0+., CoDat)
colnames(CoDat)  = paste0("Group ",1:G)
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)
#colnames(X)<-paste0("x",seq(1,p))
Y <- g(X)+ rnorm(N, 0, sigma)
EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = F, Info = T, Seed = T, nchain = 3, nskip = 100, ndpost = 100
k = 2, alpha = .5, beta = 4)
EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = F, Info = T, Seed = T, nchain = 3, nskip = 100, ndpost = 100,
k = 2, alpha = .5, beta = 4)
EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = F, Info = T, Seed = T, nchain = 3, nskip = 500, ndpost = 500,
k = 2, alpha = .95, beta = 4)
?EBcoBART
?EBcoBART()
?EBcoBART()
?EBcoBART
?Dat_EBcoBART
devtools::load_all(".")
Fact <- factor(sample(1:3,n,replace = T))
p <- 15
n <- 30
X <- matrix(runif(n*p),nrow = n, ncol = p)
Fact <- factor(sample(1:3,n,replace = T))
p <- 15
n <- 30
X <- matrix(runif(n*p),nrow = n, ncol = p)
Fact <- factor(sample(1:3,n,replace = T))
X <- cbind.data.frame(X,Fact)
G <- 4   #number of groups for co-data
CoDat = rep(1:G, rep(ncol(X)/G,G)) # first 4 covariates in group 1, 2nd 4 covariates in group 2, etc..
CoDat = data.frame(factor(CoDat))
CoDat <- model.matrix(~0+., CoDat) # encode the grouping structure with dummies
Dat_EBcoBART(X = X, CoData = CoDat)
a=Dat_EBcoBART(X = X, CoData = CoDat)
dim(a[[1]])
dim(a[[2]])
View(a$X)
p <- 15
n <- 30
X <- matrix(runif(n*p),nrow = n, ncol = p) #all continuous variables
Fact <- factor(sample(1:3,n,replace = T)) # factor variables
X <- cbind.data.frame(X,Fact)
G <- 4   #number of groups for co-data
CoDat <- rep(1:G, rep(ncol(X)/G,G)) # first 4 covariates in group 1, 2nd 4 covariates in group 2, etc..
CoDat <- data.frame(factor(CoDat))
CoDat <- model.matrix(~0+., CoDat) # encode the grouping structure with dummies
Dat <- Dat_EBcoBART(X = X, CoData = CoDat) #
devtools::load_all(".")
?Dat_EBcoBART
library(EBcoBART)
?Dat_EBcoBART()
devtools::load_all(".")
?Dat_EBcoBART()
?EBcoBART()
devtools::load_all(".")
?EBcoBART()
?Dat_EBcoBART()
devtools::load_all(".")
?Dat_EBcoBART()
devtools::load_all(".")
?EBcoBART()
?EBcoBART()
load("C:/Users/VNOB-0732/Desktop/R files/EB_coBART_paper/Application/DatForPaper.Rdata")
use_data(dat)
View(dat)
use_r("data")
View(dat)
devtools::load_all(".")
EBcoBART::dat
a= data(EBcoBART)
a= data("dat")
data("dat")
library(EBcoBART)
data("dat")
?dat
?dat
library(EBcoBART)
?dat
?dat
library(EBcoBART)
library(EBcoBART)
?dat
devtools::load_all(".")
?dat
?dat
library(EBcoBART)
?dat
?dat
?dat
library(EBcoBART)
?dat
library(EBcoBART)
?dat
library(EBcoBART)
library(EBcoBART)
?dat
?dat
library(EBcoBART)
?dat
?Dat_EBcoBART()
?EBcoBART()
?EBcoBART()
?EBcoBART()
devtools::load_all(".")
?EBcoBART()
devtools::load_all(".")
devtools::load_all(".")
devtools::load_all(".")
?EBcoBART()
devtools::load_all(".")
devtools::load_all(".")
?EBcoBART()
devtools::load_all(".")
?EBcoBART()
library(EBcoBART)
?dat
devtools::load_all(".")
?EBcoBART()
devtools::load_all(".")
?EBcoBART()
devtools::load_all(".")
?EBcoBART()
library(EBcoBART)
?dat
library(EBcoBART)
?dat
library(EBcoBART)
p <- 500
sigma <- 1.0
N <- 100
G <- 5   #number of groups
CoDat = rep(1:G, rep(p/G,G))
CoDat = data.frame(factor(CoDat))
View(CoDat)
devtools::load_all(".")
?EBcoBART()
devtools::load_all(".")
devtools::load_all(".")
library(EBcoBART)
sigma <- 1.0
N <- 100
p <- 500
G <- 5   #number of groups
CoDat = rep(1:G, rep(p/G,G))
CoDat = data.frame(factor(CoDat))
CoDat <- model.matrix(~0+., CoDat)
colnames(CoDat)  = paste0("Group ",1:G)
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)
#colnames(X)<-paste0("x",seq(1,p))
Y <- g(X)+ rnorm(N, 0, sigma)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = T, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
EstProbs <- Fit$SplittingProbs #estimated prior probabilities of variables getting selected in splitting rules
alpha_EB <- Fit$alpha_ests # estimated tree structure prior parameter alpha
k_EB <- Fit$k_ests # estimated leaf node prior parameter k
# These prior parameter estimates can then be used in your favorite BART fitting package
# We use dbarts:
FinalFit <- dbarts::bart(x.train = X, y.train = Y, # training data
ndpost = 1000,   # number of posterior samples
nskip = 1000, # number of "warmup" samples to discard
nchain = 5,   # number of independent, parallel chains
ntree = 50,    # number of trees per chain
k = k_EB, base = alpha_EB, power = beta, # hyperparameters tree
sigest = .667*var(Y),sigdf = 10, sigquant = .75,  # hyperparameters error variance
splitprobs = EstProbs,
combinechains = T)# hyperparameter that will be updated using EB and co-data
# These prior parameter estimates can then be used in your favorite BART fitting package
# We use dbarts:
FinalFit <- dbarts::bart(x.train = X, y.train = Y, # training data
ndpost = 1000,   # number of posterior samples
nskip = 1000, # number of "warmup" samples to discard
nchain = 5,   # number of independent, parallel chains
ntree = 50,    # number of trees per chain
k = k_EB, base = alpha_EB, power = 2, # hyperparameters tree
sigest = .667*var(Y),sigdf = 10, sigquant = .75,  # hyperparameters error variance
splitprobs = EstProbs,
combinechains = T)# hyperparameter that will be updated using EB and co-data
library(EBcoBART)
library(EBcoBART)
?EBcoBART()
sigma <- 1.0
N <- 100
p <- 500
G <- 5   #number of groups
CoDat = rep(1:G, rep(p/G,G))
CoDat = data.frame(factor(CoDat))
CoDat <- model.matrix(~0+., CoDat)
colnames(CoDat)  = paste0("Group ",1:G)
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)
#colnames(X)<-paste0("x",seq(1,p))
Y <- g(X)+ rnorm(N, 0, sigma)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = F, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
data(dat)
Xtr <- dat$Xtrain
Ytr <- dat$Ytrain
Xte <- dat$Xtest
Yte <- dat$Ytest
CoDat <- dat$CoData
remove(dat)
CoDat <- model.matrix(~0+., CoDat)
View(CoDat)
data(dat)
Xtr <- as.matrix(dat$Xtrain) # Xtr should be matrix object
Ytr <- dat$Ytrain
Xte <- as.matrix(dat$Xtest) # Xte should be matrix object
Yte <- dat$Ytest
CoDat <- dat$CoData
CoDat <- model.matrix(~0+., CoDat) # encode grouping structure by dummies
remove(dat)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "binary",
EB = T, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit <- EBcoBART(Y=Ytr,X=Xtr,CoData = CoDat, nIter = 15, model = "binary",
EB = T, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit <- EBcoBART(Y=Ytr,X=Xtr,CoData = CoDat, nIter = 15, model = "binary",
EB = T, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(Xtr),ncol(Xtr)),
k = 2, alpha = .95, beta = 2)
Fit$alpha_ests
EstProbs <- Fit$SplittingProbs #estimated prior probabilities of variables getting selected in splitting rules
alpha_EB <- Fit$alpha_est
k_EB <- Fit$k_est
# The prior parameter estimate EstProbs can then be used in your favorite BART fitting package
# We use dbarts:
FinalFit <- dbarts::bart(x.train = Xtr, y.train = Ytr, # training data
x.test = Xte, # test X for predictions
ndpost = 1000,   # number of posterior samples
nskip = 1000, # number of "warmup" samples to discard
nchain = 5,   # number of independent, parallel chains
ntree = 50,    # number of trees per chain
k = k_EB, base = alpha_EB, power = 2, # hyperparameters tree
splitprobs = EstProbs,
combinechains = T, verbose = F)# hyperparameter that will be updated using EB and co-data
# The prior parameter estimate EstProbs can then be used in your favorite BART fitting package
# We use dbarts:
FinalFit <- dbarts::bart(x.train = Xtr, y.train = Ytr, # training data
x.test = Xte, # test X for predictions
ndpost = 1000,   # number of posterior samples
nskip = 1000, # number of "warmup" samples to discard
nchain = 5,   # number of independent, parallel chains
ntree = 50,    # number of trees per chain
k = k_EB, base = alpha_EB, power = 2, # hyperparameters tree
splitprobs = EstProbs,
combinechains = T, verbose = F)# hyperparameter that will be updated using EB and co-data
FinalFit$yhat.test
# The prior parameter estimate EstProbs can then be used in your favorite BART fitting package
# We use dbarts:
FinalFit <- dbarts::bart(x.train = Xtr, y.train = Ytr, # training data
x.test = Xte, # test X for predictions
ndpost = 10000,   # number of posterior samples
nskip = 10000, # number of "warmup" samples to discard
nchain = 5,   # number of independent, parallel chains
ntree = 50,    # number of trees per chain
k = k_EB, base = alpha_EB, power = 2, # hyperparameters tree
splitprobs = EstProbs,
combinechains = T, verbose = F)# hyperparameter that will be updated using EB and co-data
library(EBcoBART)
?EBcoBART()
devtools::load_all(".")
?EBcoBART()
library(EBcoBART)
devtools::load_all(".")
?EBcoBART()
?EBcoBART()
library(EBcoBART)
devtools::load_all(".")
?EBcoBART()
library(EBcoBART)
library(EBcoBART)
library(EBcoBART)
?EBcoBART
library(EBcoBART)
library(EBcoBART)
EBcoBART::
EBcoBART
library(devtools)
install_github("JeroenGoedhart/EBcoBART")
library(EBcoBART)
library(devtools)
install_github("JeroenGoedhart/EBcoBART", dependencies = T)
install_github("JeroenGoedhart/EBcoBART", dependencies = T, force = T)
?EBcoBART
install.packages("dbarts")
library(backports)
install.packages("backports")
library(devtools)
install_github("JeroenGoedhart/EBcoBART")
library(devtools)
install_github("JeroenGoedhart/EBcoBART",force = T)
data(dat)
library(EBcoBART)
data("dat")
library(EBcoBART)
