library(EBcoBART)
library(EBcoBART)
?EBcoBART
data(dat)
Xtr <- as.matrix(dat$Xtrain) # Xtr should be matrix object
Ytr <- dat$Ytrain
Xte <- as.matrix(dat$Xtest) # Xte should be matrix object
Yte <- dat$Ytest
CoDat <- dat$CoData
CoDat <- model.matrix(~., CoDat) # encode grouping structure by dummies yourself (include intercept)
remove(dat)
Fit <- EBcoBART(Y=Ytr,X=Xtr,CoData = CoDat, nIter = 15, model = "binary",
EB = T, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(Xtr),ncol(Xtr)),
k = 2, alpha = .95, beta = 2)
Fit <- EBcoBART(Y=Ytr,X=Xtr,CoData = CoDat, nIter = 15, model = "binary",
EB = T, Info = T, Seed = T,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(Xtr),ncol(Xtr)),
k = 1, alpha = .1, beta = 4)
install.packages("rlang")
remotes::install_github("JeroenGoedhart/EBcoBART")
library(EBcoBART)
?EBcoBART
?EBcoBART
?EBcoBART
devtools::install_deps()
devtools::install_deps()
install.packages("cli")
devtools::install_deps()
remove.packages("cli")
devtools::install_deps()
devtools::install_deps()
devtools::install_deps()
devtools::test()
devtools::run_examples()
devtools::run_examples()
devtools::run_examples()
devtools::check()
devtools::check()
a = TRUE
!(is.logical(a))
a = matrix()
a = matrix(c(1,1,1,1),nrow = 2)
!(is.matrix(a))
(is.matrix(a))
?EBcoBART
?Dat_EBcoBART
p <- 15
n <- 30
X <- matrix(runif(n*p),nrow = n, ncol = p) #all continuous variables
Fact <- factor(sample(1:3,n,replace = TRUE)) # factor variables
X <- cbind.data.frame(X,Fact)
G <- 4   #number of groups for co-data
CoDat <- rep(1:G, rep(ncol(X)/G,G)) # first 4 covariates in group 1, 2nd 4 covariates in group 2, etc..
CoDat <- data.frame(factor(CoDat))
CoDat <- stats::model.matrix(~0+., CoDat) # encode the grouping structure with dummies
Dat <- Dat_EBcoBART(X = X, CoData = CoDat) #
X <- Dat$X
CoData <- Dat$CoData
utils::globalVariables("quasibinomial")
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
devtools::check()
usethis::use_news_md
usethis::use_news_md()
rhub::check_for_cran()
install.packages("rhub")
rhub::check_for_cran()
?rhubv2
revdepcheck::revdep_check()
tools::dependsOnPkgs()
tools::dependsOnPkgs(pkgs="EBcoBART")
devtools::check_win_release()
devtools::check_win_devel()
devtools::check_win_oldrelease()
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::rhub_doctor(gh_url = https://github.com/JeroenGoedhart/EBcoBART)
rhub::rhub_doctor(gh_url = https://github.com/JeroenGoedhart/EBcoBART.git)
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::rhub_doctor()
rhub::check_on_linux()
rhub::rhub_check()
rhub::rhub_doctor()
rhub::rhub_doctor()
usethis::create_github_token()
gitcreds::gitcreds_set()
gitcreds::gitcreds_set()
devtools::spell_check()
gitcreds::gitcreds_set()
rhub::rhub_setup()
rhub::rhub_doctor()
rhub::rhub_platforms()
rhub::rhub_check()
rhub::rhub_check()
usethis::create_github_token()
usethis::create_github_token()
gitcreds::gitcreds_set()
rhub::rhub_doctor()
rhub::rhub_platforms()
rhub::rhub_check()
rhub::rhub_check()
?EBcoBART
sigma <- 1.0
N <- 100
p <- 500
G <- 5   #number of groups
CoDat = rep(1:G, rep(p/G,G)) # specify grouping structure
CoDat = data.frame(factor(CoDat))
CoDat <- stats::model.matrix(~., CoDat) # encode grouping structure by dummies yourself
#(include intercept)
colnames(CoDat)  = paste0("Group ",1:G)
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)#'
Y <- g(X)+ rnorm(N, 0, sigma)
CoDat[1,1]<-NA
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = FALSE, Info = TRUE, Seed = TRUE,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB = FALSE, Info = TRUE, Seed = TRUE,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
devtools::check()
use_news_md(open = rlang::is_interactive())
usethis::use_news_md(open = rlang::is_interactive())
devtools::check()
devtools::check()
devtools::check()
devtools::check()
install.packages("LaplacesDemon")
library(LaplacesDemon)
df = 10
scale = 4
dinvchisq(2, 10, 0.4, log=FALSE)
dinvgamma(2, shape=df/2, scale=df*scale*0.5, log=FALSE)
dinvchisq(2, df, scale, log=FALSE)
dinvgamma(2, shape=df/2, scale=df*scale*0.5, log=FALSE)
dinvchisq(1, df, scale, log=FALSE)
dinvgamma(1, shape=df/2, scale=df*scale*0.5, log=FALSE)
install.packages("extraDistr")
library(extraDistr)
df = 10
scale = 4
x = 2
extraDistr::dinvchisq(x, nu = df, tau = 4)
extraDistr::dinvgamma(x, alpha = df/2, beta = df*scale*0.5)
df = 8
scale = 2
x = 3
extraDistr::dinvchisq(x, nu = df, tau = 4)
extraDistr::dinvgamma(x, alpha = df/2, beta = df*scale*0.5)
df = 8
scale = 2
x = 3
extraDistr::dinvchisq(x, nu = df, tau = scale)
extraDistr::dinvgamma(x, alpha = df/2, beta = df*scale*0.5)
?EBcoBART
sigma <- 1.0
N <- 100
p <- 500
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)#'
Y <- g(X)+ rnorm(N, 0, sigma)
FinalFit <- dbarts::bart(x.train = X, y.train = Y, # training data
ndpost = 5000, # number of posterior samples
nskip = 5000,  # number of "warmup" samples to discard
nchain = 5,    # number of independent chains
ntree = 50,    # number of trees
k = 2, base = .95, power = 2, # prior parameters tree
sigest = stats::sd(Y)*0.667, #prior error variance
sigdf = 10, sigquant = .75,  #prior error variance
splitprobs = c(),   # prior variable weights
combinechains = TRUE, verbose = FALSE)
sigma <- FinalFit$sigma
install.packages("univariateML")
library(univariateML)
univariateML::mlinvgamma(sigma)
HypEsts <- univariateML::mlinvgamma(sigma)
alpha = HypEsts[1]
g
g
g
sigma <- 1.0
N <- 100
p <- 500
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)#'
Y <- g(X)+ rnorm(N, 0, sigma)
FinalFit <- dbarts::bart(x.train = X, y.train = Y, # training data
ndpost = 5000, # number of posterior samples
nskip = 5000,  # number of "warmup" samples to discard
nchain = 5,    # number of independent chains
ntree = 50,    # number of trees
k = 2, base = .95, power = 2, # prior parameters tree
sigest = stats::sd(Y)*0.667, #prior error variance
sigdf = 10, sigquant = .75,  #prior error variance
splitprobs = c(),   # prior variable weights
combinechains = TRUE, verbose = FALSE)
sigma <- FinalFit$sigma
library(univariateML)
HypEsts <- univariateML::mlinvgamma(sigma)
shape = HypEsts[1]
scale = HypEsts[2]
x = 4
extraDistr::dinvgamma(x, alpha = shape, beta = scale)
extraDistr::dinvchisq(x, nu = shape*2, tau = scale/shape)
pinvchisq(.75, nu = shape*2, tau = scale/shape, lower.tail = TRUE, log.p = FALSE)
qinvchisq(.75, nu = shape*2, tau = scale/shape, lower.tail = TRUE, log.p = FALSE)
stats::sd(Y)*0.667
qinvchisq(.75, nu = shape*2, tau = scale/shape, lower.tail = FALSE, log.p = FALSE)
pinvchisq(sd(Y)*0.667, nu = shape*2, tau = scale/shape, lower.tail = FALSE, log.p = FALSE)
pinvchisq(sd(Y)*0.667, nu = shape*2, tau = scale/shape)
.EstSigma <- function(sigma, quant){
## ---------------------------------------------------------------------
## Estimate error variance parameters df and sigest from posterior samples
## ---------------------------------------------------------------------
HypEsts <- univariateML::mlinvgamma(sigma)
shape = HypEsts[1]
scale = HypEsts[2]
nu = 2*shape #transform parameters of invgamma to invchi^2
tau = scale/shape
sigest = extraDistr::qinvchisq(quant, nu = shape*2, tau = scale/shape)
return(c("df" = nu,"sigest" = sigest))
}
.EstSigma(sigma = sigma, quant = .75)
.EstSigma <- function(sigma, quant){
## ---------------------------------------------------------------------
## Estimate error variance parameters df and sigest from posterior samples
## ---------------------------------------------------------------------
HypEsts <- univariateML::mlinvgamma(sigma)
shape = unname(HypEsts[1])
scale = HypEsts[2]
nu = 2*shape #transform parameters of invgamma to invchi^2
tau = scale/shape
sigest = extraDistr::qinvchisq(quant, nu = shape*2, tau = scale/shape)
return(c("df" = nu,"sigest" = sigest))
}
.EstSigma(sigma = sigma, quant = .75)
HypEsts <- .EstSigma(sigma = FinalFit$sigma, quant = .75)
?EBcoBART
sigma <- 1.0
N <- 100
p <- 500
G <- 5   #number of groups
CoDat = rep(1:G, rep(p/G,G)) # specify grouping structure
CoDat = data.frame(factor(CoDat))
CoDat <- stats::model.matrix(~., CoDat) # encode grouping structure by dummies yourself
#(include intercept)
colnames(CoDat)  = paste0("Group ",1:G)
g <- function(x) {
10 * sin(pi * x[,1] * x[,2]) + 20 * (x[,101] - 0.5)^2 + 10 * x[,102] + 10 * x[,3]
}
X <- matrix(runif(N * p), N, p)#'
Y <- g(X)+ rnorm(N, 0, sigma)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB_k = FALSE, EB_alpha = FALSE, EB_sigma = TRUE,
Info = TRUE, Seed = TRUE,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit$sigma_est
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB_k = FALSE, EB_alpha = FALSE, EB_sigma = TRUE,
Info = TRUE, Seed = TRUE,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB_k = FALSE, EB_alpha = FALSE, EB_sigma = TRUE,
Info = TRUE, Seed = TRUE,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit <- EBcoBART(Y=Y,X=X,CoData = CoDat, nIter = 15, model = "continuous",
EB_k = T, EB_alpha = T, EB_sigma = TRUE,
Info = TRUE, Seed = TRUE,
nchain = 5, nskip = 1000, ndpost = 1000,
Prob_Init = rep(1/ncol(X),ncol(X)),
k = 2, alpha = .95, beta = 2)
Fit$sigma_est
Fit$k_est
Fit$alpha_est
devtools::check()
usethis::use_build_ignore(".github")
devtools::check()
devtools::check_win_devel()
goodpractice::gp()
install.packages("goodpractice")
goodpractice::gp()
install.packages("goodpractice")
goodpractice::gp()
seq_len(G)
seq_len(N)
for (i in seq_along(5)) {
print(i)
}
for (i in seq_along(5)) {
print(i)
}
for (i in seq_len(5)) {
print(i)
}
a=c(1,2,3)
a=c(1,2,4)
seq_len(a)
seq_along(a)
a=c(1,2,4)
seq_along(a)
seq_len(a)
for (i in a) {
print(i)
}
seq_len(CoDat)
seq_along(CoDat)
goodpractice::gp()
goodpractice::gp()
a <- c(1,2,5,6)
a <- c(1,2,5,6)
seq_along(a)
a <- c(1,2,5,6,9)
seq_along(a)
seq_len(a)
?Dat_EBcoBART
p <- 15
n <- 30
X <- matrix(runif(n*p),nrow = n, ncol = p) #all continuous variables
Fact <- factor(sample(1:3,n,replace = TRUE)) # factor variables
X <- cbind.data.frame(X,Fact)
G <- 4   #number of groups for co-data
CoDat <- rep(1:G, rep(ncol(X)/G,G)) # first 4 covariates in group 1,
#2nd 4 covariates in group 2, etc..
CoDat <- data.frame(factor(CoDat))
CoDat <- stats::model.matrix(~0+., CoDat) # encode the grouping structure
idVars <- which(sapply(X, is.factor))
idVars <- which(vapply(X, is.factor))
idVars <- which(vapply(X, function(x) is.factor(x)))
idVars <- which(vapply(X, is.factor, FUN.VALUE = data.frame(1)))
idVars <- which(vapply(X, is.factor, FUN.VALUE = list)))
idVars <- which(vapply(X, is.factor, FUN.VALUE = list(1))))
idVars <- which(vapply(X, is.factor, FUN.VALUE = list(1)))
vapply(X, is.factor, FUN.VALUE = data.frame(1))
seq_len(nrow(X))
goodpractice::gp()
goodpractice::gp()
lapply(X, is.factor)
which(lapply(X, is.factor))
unlist(lapply(X, is.factor))
which(unlist(lapply(X, is.factor)))
goodpractice::gp()
devtools::check()
devtools::spell_check()
inteRgrate::check_pkg()
library(rhub)
rhub_setup()
rhub_doctor()
rhub::rhub_check()
remotes::install_github("jumpingrivers/inteRgrate")
remotes::install_github("jumpingrivers/inteRgrate")
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_gitignore()
inteRgrate::check_lintr()
check_r_filenames()
inteRgrate::check_r_filenames()
inteRgrate::check_lintr()
inteRgrate::check_lintr()
